openapi: 3.0.0
info:
  title: Trivia API
  description: API for a trivia game
  version: 1.0.0
servers:
  - url: https://trivia-api.artemrudenko.com
    description: Production server
  - url: http://localhost:8080
    description: Development server

paths:
  /rooms:
    post:
      summary: Create a room
      operationId: createRoom
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
              required:
                - code
      responses:
        "201":
          description: Room created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"

  /rooms/{roomId}:
    get:
      summary: Get a room
      operationId: getRoom
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Room retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "404":
          description: Room not found

    delete:
      summary: Delete a room
      operationId: deleteRoom
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Room deleted
        "401":
          description: Player not authenticated
        "403":
          description: Only the host can delete a room
        "404":
          description: Room not found

  /rooms/{roomId}/players:
    post:
      summary: Join a room as a player
      operationId: joinRoom
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                username:
                  type: string
                  minLength: 3
              required:
                - code
                - username
      responses:
        "201":
          description: Joined the room
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
        "400":
          description: Invalid room code
        "404":
          description: Room not found

    get:
      summary: Get the players of a room
      operationId: getPlayers
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Players retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Player"
        "404":
          description: Room not found

  /rooms/{roomId}/players/{playerId}:
    delete:
      summary: Remove a player from a room
      operationId: deletePlayer
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Player deleted
        "401":
          description: Player not authenticated
        "403":
          description: Only the host can delete another player
        "404":
          description: Room or player not found

  /rooms/{roomId}/teams:
    post:
      summary: Create a team
      operationId: createTeam
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: Team created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "401":
          description: Player not authenticated
        "403":
          description: Only the host can create a team
        "404":
          description: Room not found

    get:
      summary: Get the teams of a room
      operationId: getTeams
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Teams retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Team"
        "404":
          description: Room not found

  /rooms/{roomId}/teams/{teamId}:
    delete:
      summary: Delete a team
      operationId: deleteTeam
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Team deleted
        "403":
          description: Only the host can delete a team
        "404":
          description: Room or team not found

  /rooms/{roomId}/teams/{teamId}/players:
    get:
      summary: Get the players of a team
      operationId: getTeamPlayers
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Players retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Player"
        "404":
          description: Room or team not found

  /rooms/{roomId}/teams/{teamId}/players/{playerId}:
    put:
      summary: Assign a player to a team
      operationId: assignPlayerToTeam
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Player assigned to team
        "401":
          description: Player not authenticated
        "403":
          description: Only the host can assign another player to a team
        "404":
          description: Room, team or player not found

    delete:
      summary: Remove a player from a team
      operationId: removePlayerFromTeam
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
        - name: teamId
          in: path
          required: true
          schema:
            type: string
        - name: playerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Player removed from team
        "403":
          description: Only the host can remove another player
        "404":
          description: Room, team or player not found

  /games:
    get:
      summary: Get games
      operationId: getGames
      parameters:
        - name: roomId
          in: query
          required: false
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Games retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"

    post:
      summary: Create a game with the players of a room
      operationId: createGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  type: integer
                rounds:
                  type: integer
                  minimum: 1
                timePerRound:
                  type: integer
                  minimum: 10
                questionsPerRound:
                  type: integer
                  minimum: 1
              required:
                - roomId
      responses:
        "201":
          description: Game created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        "400":
          description: Invalid room id
        "401":
          description: Player not authenticated
        "403":
          description: Only the host can create a game

  /games/{gameId}:
    get:
      summary: Get the details of a game
      operationId: getGame
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Game retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        "404":
          description: Game not found

    delete:
      summary: Delete a game
      operationId: deleteGame
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Game deleted
        "401":
          description: Player not authenticated
        "403":
          description: Only the host can delete the game
        "404":
          description: Game not found

  /games/{gameId}/rounds:
    get:
      summary: Get the rounds of a game
      operationId: getRounds
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Rounds retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Round"
        "404":
          description: Game not found

  /games/{gameId}/rounds/{roundId}/questions:
    get:
      summary: Get the questions of a round
      operationId: getRoundQuestions
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
        - name: roundId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Questions retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
        "403":
          description: Round has not started yet
        "404":
          description: Game or round not found

  /games/{gameId}/rounds/{roundId}/questions/{questionId}:
    post:
      summary: Submit the answer to a question
      operationId: submitAnswer
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
        - name: roundId
          in: path
          required: true
          schema:
            type: integer
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answer:
                  type: string
              required:
                - answer
      responses:
        "200":
          description: Answer submitted
        "401":
          description: Player not authenticated
        "403":
          description: Round has already ended or player is not in the room
        "404":
          description: Game, round or question not found

    get:
      summary: Get the answers of a question
      operationId: getAnswers
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
        - name: roundId
          in: path
          required: true
          schema:
            type: integer
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Answers retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Answer"
        "403":
          description: Round has not ended yet
        "404":
          description: Game, round, question or answer not found

components:
  schemas:
    Room:
      type: object
      properties:
        roomId:
          type: integer
        hostId:
          type: integer
          nullable: true # null if no host in the room
        createdAt:
          type: string
          format: date-time
        code:
          type: string

    Team:
      type: object
      properties:
        teamId:
          type: integer
        roomId:
          type: integer

    Player:
      type: object
      properties:
        playerId:
          type: integer
        roomId:
          type: integer
        teamId:
          type: string
          nullable: true # null if player is not in a team
        username:
          type: string

    Game:
      type: object
      properties:
        gameId:
          type: integer
        roomId:
          type: integer
        createdAt:
          type: string
          format: date-time
        endedAt:
          type: string
          format: date-time
        roundCount:
          type: integer
          minimum: 1

    Round:
      type: object
      properties:
        roundId:
          type: integer
        gameId:
          type: integer
        createdAt:
          type: string
          format: date-time
        endedAt:
          type: string
          format: date-time
        questionCount:
          type: integer
          minimum: 1

    Question:
      type: object
      properties:
        questionId:
          type: integer
        type:
          type: string
        question:
          type: string
        mediaUrl:
          type: string
          nullable: true
        options:
          type: array
          items:
            type: string
          nullable: true # null if type is not multiple_choice
        correctAnswers:
          type: array
          items:
            type: string
          nullable: true # null if round has not ended

    Answer:
      type: object
      properties:
        answerId:
          type: integer
        roundId:
          type: integer
        questionId:
          type: integer
        playerId:
          type: integer
        answer:
          type: string
        correct:
          type: boolean
          nullable: true # null if round has not ended

